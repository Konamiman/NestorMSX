<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
var lines = File.ReadAllLines(Host.ResolvePath("InstructionTemplatesSource.txt"));

var items =
	lines
	.Select(l => l.Trim().Replace("   ", " ").Replace("  ", " "))
	.Where(l => l != "" && !l.StartsWith(";"))
	.Select(l => { var tokens = l.Split(';').Select(t => t.Trim()).ToArray(); return tokens; })
	.Where(t => t[1].StartsWith("DD") && !t[1].StartsWith("DD CB"))
	.Select(t => new Tuple<string, string[], byte[]>(t[0], t[1].Split(' '), t[1].Split(' ').Select(x => x=="DIS" || x.StartsWith("N") ? (byte)0 : Byte.Parse(x, System.Globalization.NumberStyles.AllowHexSpecifier )).ToArray()))
	.OrderBy(t => t.Item2[1])
	.ToDictionary(t => (byte)t.Item3[1], t => t)
	;

	var halfIndexRegisters = new[] {"ixh", "ixl", "iyh", "iyl"};

	#>
//AUTOGENERATED FILE - Do not modify directly
//Change the .tt file instead

namespace Konamiman.NestorMSX.Z80Debugger
{
    public partial class InstructionExtractor
    {
        private readonly Z80Instruction[] DDInstructionPrototypes =
        {
<# foreach(var opcode in items.Keys) { #>
<# 
	  var item = items[opcode];

      var formatString = item.Item1.Replace("NNo","{0}").Replace("NN","{0}").Replace("N","{0}").Replace("DIS","{0}");

	   var operandIndex = -1;
	   var bytes = item.Item2.ToList();

	   string operandType = "ImmediateByte";
	   operandIndex = bytes.IndexOf("N");
	   if(operandIndex == -1) {
		   operandType = "RelativeJumpAddress";
		   operandIndex = bytes.IndexOf("NNo");
       }
	   if(operandIndex == -1) {
		   operandType = "ImmediateWord";
		   operandIndex = bytes.IndexOf("NNl");
       }
	   if(operandIndex == -1) {
		   operandType = "IndexRegisterOffset";
		   operandIndex = bytes.IndexOf("DIS");
       }
	   if(operandIndex == -1) {
		   operandType = null;
       }

	   if(operandType == "ImmediateWord" && 
	       (item.Item1.Contains("(") || item.Item1.StartsWith("call") || item.Item1.StartsWith("jp")))
			operandType = "AbsoluteMemoryAddress";
#>
<# if(opcode == 0x36) { /*only instruction with two operands, so let's just treat as a special case*/ #>
            new Z80Instruction //0xDD 0x36
            {
                FormatString = "ld (ix+{0}),{1}",
				RawBytes = new byte[] { 0xDD, 0x36, 0x00, 0x00 },
				Operands = new[]
                {
				    new Operand
                    {
                        Type = OperandType.IndexRegisterOffset,
                        OffsetWithinInstruction = 2
                    },
                    new Operand
                    {
                        Type = OperandType.ImmediateByte,
                        OffsetWithinInstruction = 3
                    }
                },
				InstructionType = InstructionType.Standard,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = true,
                WritesToPort = false
            },
<# } else { #>
            new Z80Instruction //<#= string.Format("0xDD 0x{0:X2}",opcode) #>
            {
                FormatString = "<#=formatString#>",
				RawBytes = new byte[] { <#= string.Join(", ", item.Item3.Select(b => string.Format("0x{0:X2}",b))) #> },
<# if(operandType == null) { #>
				Operands = new Operand[0],
<# } else { #>
				Operands = new[]
                {
                    new Operand
                    {
                        Type = OperandType.<#=operandType#>,
                        OffsetWithinInstruction = <#=operandIndex#>
                    }
                },
<# } #>
				InstructionType = InstructionType.<#= halfIndexRegisters.Any(r => formatString.Contains(r)) ? "Undocumented" : "Standard" #>,
				ChangesSp = <#= formatString.StartsWith("push") || formatString.StartsWith("pop") || formatString.Contains("sp,") ? "true" : "false" #>,
                ChangesPc = <#= formatString.StartsWith("jp") ? "true" : "false" #>,
                WritesToMemory = <#= formatString.StartsWith("ld (") || formatString.StartsWith("inc (") || formatString.StartsWith("dec (") ? "true" : "false" #>,
                WritesToPort = false
            },
<# }} #>
		};
    }
}