<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
var lines = File.ReadAllLines(Host.ResolvePath("InstructionTemplatesSource.txt"));

var items =
	lines
	.Select(l => l.Trim().Replace("   ", " ").Replace("  ", " "))
	.Where(l => l != "" && !l.StartsWith(";"))
	.Select(l => { var tokens = l.Split(';').Select(t => t.Trim()).ToArray(); return tokens; })
	.Where(t => t[1].StartsWith("CB"))
	.Select(t => new Tuple<string, string[], byte[]>(t[0], t[1].Split(' '), t[1].Split(' ').Select(x => x=="DIS" || x.StartsWith("N") ? (byte)0 : Byte.Parse(x, System.Globalization.NumberStyles.AllowHexSpecifier )).ToArray()))
	.OrderBy(t => t.Item2[1])
	.ToArray()
	;

int index = 0;
	#>
//AUTOGENERATED FILE - Do not modify directly
//Change the .tt file instead

namespace Konamiman.NestorMSX.Z80Debugger
{
    public partial class InstructionExtractor
    {
        private readonly Z80Instruction[] cbInstructionPrototypes =
        {
<# foreach(var item in items) { #>
<#
       var instructionType = item.Item1.StartsWith("sll") ? "UndocumentedNew" : "Standard";
       var bytes = item.Item2.ToList();
#>
            new Z80Instruction //0xCB <#= string.Format("0x{0:X2}",index) #>
            {
                FormatString = "<#=item.Item1#>",
				RawBytes = new byte[] { <#= string.Join(", ", item.Item3.Select(b => string.Format("0x{0:X2}",b))) #> },
				Operands = new Operand[0],
				InstructionType = InstructionType.<#= instructionType#>,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = <#= item.Item1.Contains("(") && !item.Item1.StartsWith("bit") ? "true" : "false" #>,
                WritesToPort = false
            },
<# index++; } #>
		};
    }
}