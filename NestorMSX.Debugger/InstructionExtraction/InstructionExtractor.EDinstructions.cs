//AUTOGENERATED FILE - Do not modify directly
//Change the .tt file instead

namespace Konamiman.NestorMSX.Z80Debugger.InstructionExtraction
{
    public partial class InstructionExtractor
    {
        private readonly Z80Instruction[] EDInstructionPrototypes =
        {
            new Z80Instruction //0x40
            {
                FormatString = "in b,(c)",
				RawBytes = new byte[] { 0xED, 0x40 },
				Operands = new Operand[0],
				InstructionType = InstructionType.Standard,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = false
            },
            new Z80Instruction //0x41
            {
                FormatString = "out (c),b",
				RawBytes = new byte[] { 0xED, 0x41 },
				Operands = new Operand[0],
				InstructionType = InstructionType.Standard,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = true
            },
            new Z80Instruction //0x42
            {
                FormatString = "sbc hl,bc",
				RawBytes = new byte[] { 0xED, 0x42 },
				Operands = new Operand[0],
				InstructionType = InstructionType.Standard,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = false
            },
            new Z80Instruction //0x43
            {
                FormatString = "ld ({0}),bc",
				RawBytes = new byte[] { 0xED, 0x43, 0x00, 0x00 },
				Operands = new[]
                {
                    new Operand
                    {
                        Type = OperandType.AbsoluteMemoryAddress,
                        OffsetWithinInstruction = 2
                    }
                },
				InstructionType = InstructionType.Standard,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = true,
                WritesToPort = false
            },
            new Z80Instruction //0x44
            {
                FormatString = "neg",
				RawBytes = new byte[] { 0xED, 0x44 },
				Operands = new Operand[0],
				InstructionType = InstructionType.Standard,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = false
            },
            new Z80Instruction //0x45
            {
                FormatString = "retn",
				RawBytes = new byte[] { 0xED, 0x45 },
				Operands = new Operand[0],
				InstructionType = InstructionType.Standard,
				ChangesSp = true,
                ChangesPc = true,
                WritesToMemory = false,
                WritesToPort = false
            },
            new Z80Instruction //0x46
            {
                FormatString = "im 0",
				RawBytes = new byte[] { 0xED, 0x46 },
				Operands = new Operand[0],
				InstructionType = InstructionType.Standard,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = false
            },
            new Z80Instruction //0x47
            {
                FormatString = "ld i,a",
				RawBytes = new byte[] { 0xED, 0x47 },
				Operands = new Operand[0],
				InstructionType = InstructionType.Standard,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = false
            },
            new Z80Instruction //0x48
            {
                FormatString = "in c,(c)",
				RawBytes = new byte[] { 0xED, 0x48 },
				Operands = new Operand[0],
				InstructionType = InstructionType.Standard,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = false
            },
            new Z80Instruction //0x49
            {
                FormatString = "out (c),c",
				RawBytes = new byte[] { 0xED, 0x49 },
				Operands = new Operand[0],
				InstructionType = InstructionType.Standard,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = true
            },
            new Z80Instruction //0x4A
            {
                FormatString = "adc hl,bc",
				RawBytes = new byte[] { 0xED, 0x4A },
				Operands = new Operand[0],
				InstructionType = InstructionType.Standard,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = false
            },
            new Z80Instruction //0x4B
            {
                FormatString = "ld bc,({0})",
				RawBytes = new byte[] { 0xED, 0x4B, 0x00, 0x00 },
				Operands = new[]
                {
                    new Operand
                    {
                        Type = OperandType.AbsoluteMemoryAddress,
                        OffsetWithinInstruction = 2
                    }
                },
				InstructionType = InstructionType.Standard,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = false
            },
            new Z80Instruction //0x4C
            {
                FormatString = "neg",
				RawBytes = new byte[] { 0xED, 0x4C },
				Operands = new Operand[0],
				InstructionType = InstructionType.UnsafeMirror,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = false
            },
            new Z80Instruction //0x4D
            {
                FormatString = "reti",
				RawBytes = new byte[] { 0xED, 0x4D },
				Operands = new Operand[0],
				InstructionType = InstructionType.Standard,
				ChangesSp = true,
                ChangesPc = true,
                WritesToMemory = false,
                WritesToPort = false
            },
            new Z80Instruction //0x4E
            {
                FormatString = "im 0",
				RawBytes = new byte[] { 0xED, 0x4E },
				Operands = new Operand[0],
				InstructionType = InstructionType.UnsafeMirror,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = false
            },
            new Z80Instruction //0x4F
            {
                FormatString = "ld r,a",
				RawBytes = new byte[] { 0xED, 0x4F },
				Operands = new Operand[0],
				InstructionType = InstructionType.Standard,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = false
            },
            new Z80Instruction //0x50
            {
                FormatString = "in d,(c)",
				RawBytes = new byte[] { 0xED, 0x50 },
				Operands = new Operand[0],
				InstructionType = InstructionType.Standard,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = false
            },
            new Z80Instruction //0x51
            {
                FormatString = "out (c),d",
				RawBytes = new byte[] { 0xED, 0x51 },
				Operands = new Operand[0],
				InstructionType = InstructionType.Standard,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = true
            },
            new Z80Instruction //0x52
            {
                FormatString = "sbc hl,de",
				RawBytes = new byte[] { 0xED, 0x52 },
				Operands = new Operand[0],
				InstructionType = InstructionType.Standard,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = false
            },
            new Z80Instruction //0x53
            {
                FormatString = "ld ({0}),de",
				RawBytes = new byte[] { 0xED, 0x53, 0x00, 0x00 },
				Operands = new[]
                {
                    new Operand
                    {
                        Type = OperandType.AbsoluteMemoryAddress,
                        OffsetWithinInstruction = 2
                    }
                },
				InstructionType = InstructionType.Standard,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = true,
                WritesToPort = false
            },
            new Z80Instruction //0x54
            {
                FormatString = "neg",
				RawBytes = new byte[] { 0xED, 0x54 },
				Operands = new Operand[0],
				InstructionType = InstructionType.UnsafeMirror,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = false
            },
            new Z80Instruction //0x55
            {
                FormatString = "retn",
				RawBytes = new byte[] { 0xED, 0x55 },
				Operands = new Operand[0],
				InstructionType = InstructionType.UnsafeMirror,
				ChangesSp = true,
                ChangesPc = true,
                WritesToMemory = false,
                WritesToPort = false
            },
            new Z80Instruction //0x56
            {
                FormatString = "im 1",
				RawBytes = new byte[] { 0xED, 0x56 },
				Operands = new Operand[0],
				InstructionType = InstructionType.Standard,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = false
            },
            new Z80Instruction //0x57
            {
                FormatString = "ld a,i",
				RawBytes = new byte[] { 0xED, 0x57 },
				Operands = new Operand[0],
				InstructionType = InstructionType.Standard,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = false
            },
            new Z80Instruction //0x58
            {
                FormatString = "in e,(c)",
				RawBytes = new byte[] { 0xED, 0x58 },
				Operands = new Operand[0],
				InstructionType = InstructionType.Standard,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = false
            },
            new Z80Instruction //0x59
            {
                FormatString = "out (c),e",
				RawBytes = new byte[] { 0xED, 0x59 },
				Operands = new Operand[0],
				InstructionType = InstructionType.Standard,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = true
            },
            new Z80Instruction //0x5A
            {
                FormatString = "adc hl,de",
				RawBytes = new byte[] { 0xED, 0x5A },
				Operands = new Operand[0],
				InstructionType = InstructionType.Standard,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = false
            },
            new Z80Instruction //0x5B
            {
                FormatString = "ld de,({0})",
				RawBytes = new byte[] { 0xED, 0x5B, 0x00, 0x00 },
				Operands = new[]
                {
                    new Operand
                    {
                        Type = OperandType.AbsoluteMemoryAddress,
                        OffsetWithinInstruction = 2
                    }
                },
				InstructionType = InstructionType.Standard,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = false
            },
            new Z80Instruction //0x5C
            {
                FormatString = "neg",
				RawBytes = new byte[] { 0xED, 0x5C },
				Operands = new Operand[0],
				InstructionType = InstructionType.UnsafeMirror,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = false
            },
            new Z80Instruction //0x5D
            {
                FormatString = "reti",
				RawBytes = new byte[] { 0xED, 0x5D },
				Operands = new Operand[0],
				InstructionType = InstructionType.UnsafeMirror,
				ChangesSp = true,
                ChangesPc = true,
                WritesToMemory = false,
                WritesToPort = false
            },
            new Z80Instruction //0x5E
            {
                FormatString = "im 2",
				RawBytes = new byte[] { 0xED, 0x5E },
				Operands = new Operand[0],
				InstructionType = InstructionType.Standard,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = false
            },
            new Z80Instruction //0x5F
            {
                FormatString = "ld a,r",
				RawBytes = new byte[] { 0xED, 0x5F },
				Operands = new Operand[0],
				InstructionType = InstructionType.Standard,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = false
            },
            new Z80Instruction //0x60
            {
                FormatString = "in h,(c)",
				RawBytes = new byte[] { 0xED, 0x60 },
				Operands = new Operand[0],
				InstructionType = InstructionType.Standard,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = false
            },
            new Z80Instruction //0x61
            {
                FormatString = "out (c),h",
				RawBytes = new byte[] { 0xED, 0x61 },
				Operands = new Operand[0],
				InstructionType = InstructionType.Standard,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = true
            },
            new Z80Instruction //0x62
            {
                FormatString = "sbc hl,hl",
				RawBytes = new byte[] { 0xED, 0x62 },
				Operands = new Operand[0],
				InstructionType = InstructionType.Standard,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = false
            },
            new Z80Instruction //0x63
            {
                FormatString = "ld ({0}),hl",
				RawBytes = new byte[] { 0x63, 0x00, 0x00 },
				Operands = new[]
                {
                    new Operand
                    {
                        Type = OperandType.AbsoluteMemoryAddress,
                        OffsetWithinInstruction = 1
                    }
                },
				InstructionType = InstructionType.SafeMirror,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = true,
                WritesToPort = false
            },
            new Z80Instruction //0x64
            {
                FormatString = "neg",
				RawBytes = new byte[] { 0xED, 0x64 },
				Operands = new Operand[0],
				InstructionType = InstructionType.UnsafeMirror,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = false
            },
            new Z80Instruction //0x65
            {
                FormatString = "retn",
				RawBytes = new byte[] { 0xED, 0x65 },
				Operands = new Operand[0],
				InstructionType = InstructionType.UnsafeMirror,
				ChangesSp = true,
                ChangesPc = true,
                WritesToMemory = false,
                WritesToPort = false
            },
            new Z80Instruction //0x66
            {
                FormatString = "im 0",
				RawBytes = new byte[] { 0xED, 0x66 },
				Operands = new Operand[0],
				InstructionType = InstructionType.UnsafeMirror,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = false
            },
            new Z80Instruction //0x67
            {
                FormatString = "rrd",
				RawBytes = new byte[] { 0xED, 0x67 },
				Operands = new Operand[0],
				InstructionType = InstructionType.Standard,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = false
            },
            new Z80Instruction //0x68
            {
                FormatString = "in l,(c)",
				RawBytes = new byte[] { 0xED, 0x68 },
				Operands = new Operand[0],
				InstructionType = InstructionType.Standard,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = false
            },
            new Z80Instruction //0x69
            {
                FormatString = "out (c),l",
				RawBytes = new byte[] { 0xED, 0x69 },
				Operands = new Operand[0],
				InstructionType = InstructionType.Standard,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = true
            },
            new Z80Instruction //0x6A
            {
                FormatString = "adc hl,hl",
				RawBytes = new byte[] { 0xED, 0x6A },
				Operands = new Operand[0],
				InstructionType = InstructionType.Standard,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = false
            },
            new Z80Instruction //0x6B
            {
                FormatString = "ld hl,({0})",
				RawBytes = new byte[] { 0x6B, 0x00, 0x00 },
				Operands = new[]
                {
                    new Operand
                    {
                        Type = OperandType.AbsoluteMemoryAddress,
                        OffsetWithinInstruction = 1
                    }
                },
				InstructionType = InstructionType.SafeMirror,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = false
            },
            new Z80Instruction //0x6C
            {
                FormatString = "neg",
				RawBytes = new byte[] { 0xED, 0x6C },
				Operands = new Operand[0],
				InstructionType = InstructionType.UnsafeMirror,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = false
            },
            new Z80Instruction //0x6D
            {
                FormatString = "reti",
				RawBytes = new byte[] { 0xED, 0x6D },
				Operands = new Operand[0],
				InstructionType = InstructionType.UnsafeMirror,
				ChangesSp = true,
                ChangesPc = true,
                WritesToMemory = false,
                WritesToPort = false
            },
            new Z80Instruction //0x6E
            {
                FormatString = "im 0",
				RawBytes = new byte[] { 0xED, 0x6E },
				Operands = new Operand[0],
				InstructionType = InstructionType.UnsafeMirror,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = false
            },
            new Z80Instruction //0x6F
            {
                FormatString = "rld",
				RawBytes = new byte[] { 0xED, 0x6F },
				Operands = new Operand[0],
				InstructionType = InstructionType.Standard,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = false
            },
            new Z80Instruction //0x70
            {
                FormatString = "in f,(c)",
				RawBytes = new byte[] { 0xED, 0x70 },
				Operands = new Operand[0],
				InstructionType = InstructionType.Undocumented,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = false
            },
            new Z80Instruction //0x71
            {
                FormatString = "out (c),0",
				RawBytes = new byte[] { 0xED, 0x71 },
				Operands = new Operand[0],
				InstructionType = InstructionType.Undocumented,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = true
            },
            new Z80Instruction //0x72
            {
                FormatString = "sbc hl,sp",
				RawBytes = new byte[] { 0xED, 0x72 },
				Operands = new Operand[0],
				InstructionType = InstructionType.Standard,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = false
            },
            new Z80Instruction //0x73
            {
                FormatString = "ld ({0}),sp",
				RawBytes = new byte[] { 0xED, 0x73, 0x00, 0x00 },
				Operands = new[]
                {
                    new Operand
                    {
                        Type = OperandType.AbsoluteMemoryAddress,
                        OffsetWithinInstruction = 2
                    }
                },
				InstructionType = InstructionType.Standard,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = true,
                WritesToPort = false
            },
            new Z80Instruction //0x74
            {
                FormatString = "neg",
				RawBytes = new byte[] { 0xED, 0x74 },
				Operands = new Operand[0],
				InstructionType = InstructionType.UnsafeMirror,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = false
            },
            new Z80Instruction //0x75
            {
                FormatString = "retn",
				RawBytes = new byte[] { 0xED, 0x75 },
				Operands = new Operand[0],
				InstructionType = InstructionType.UnsafeMirror,
				ChangesSp = true,
                ChangesPc = true,
                WritesToMemory = false,
                WritesToPort = false
            },
            new Z80Instruction //0x76
            {
                FormatString = "im 1",
				RawBytes = new byte[] { 0xED, 0x76 },
				Operands = new Operand[0],
				InstructionType = InstructionType.UnsafeMirror,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = false
            },
			null, //0x77
            new Z80Instruction //0x78
            {
                FormatString = "in a,(c)",
				RawBytes = new byte[] { 0xED, 0x78 },
				Operands = new Operand[0],
				InstructionType = InstructionType.Standard,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = false
            },
            new Z80Instruction //0x79
            {
                FormatString = "out (c),a",
				RawBytes = new byte[] { 0xED, 0x79 },
				Operands = new Operand[0],
				InstructionType = InstructionType.Standard,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = true
            },
            new Z80Instruction //0x7A
            {
                FormatString = "adc hl,sp",
				RawBytes = new byte[] { 0xED, 0x7A },
				Operands = new Operand[0],
				InstructionType = InstructionType.Standard,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = false
            },
            new Z80Instruction //0x7B
            {
                FormatString = "ld sp,({0})",
				RawBytes = new byte[] { 0xED, 0x7B, 0x00, 0x00 },
				Operands = new[]
                {
                    new Operand
                    {
                        Type = OperandType.AbsoluteMemoryAddress,
                        OffsetWithinInstruction = 2
                    }
                },
				InstructionType = InstructionType.Standard,
				ChangesSp = true,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = false
            },
            new Z80Instruction //0x7C
            {
                FormatString = "neg",
				RawBytes = new byte[] { 0xED, 0x7C },
				Operands = new Operand[0],
				InstructionType = InstructionType.UnsafeMirror,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = false
            },
            new Z80Instruction //0x7D
            {
                FormatString = "reti",
				RawBytes = new byte[] { 0xED, 0x7D },
				Operands = new Operand[0],
				InstructionType = InstructionType.UnsafeMirror,
				ChangesSp = true,
                ChangesPc = true,
                WritesToMemory = false,
                WritesToPort = false
            },
            new Z80Instruction //0x7E
            {
                FormatString = "im 2",
				RawBytes = new byte[] { 0xED, 0x7E },
				Operands = new Operand[0],
				InstructionType = InstructionType.UnsafeMirror,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = false
            },
			null, //0x7F
		};

		private readonly Z80Instruction[] EDBlockInstructionPrototypes =
        {
            new Z80Instruction //0xA0
            {
                FormatString = "ldi",
				RawBytes = new byte[] { 0xED, 0xA0 },
				Operands = new Operand[0],
				InstructionType = InstructionType.Standard,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = true,
                WritesToPort = false
            },
            new Z80Instruction //0xA1
            {
                FormatString = "cpi",
				RawBytes = new byte[] { 0xED, 0xA1 },
				Operands = new Operand[0],
				InstructionType = InstructionType.Standard,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = false
            },
            new Z80Instruction //0xA2
            {
                FormatString = "ini",
				RawBytes = new byte[] { 0xED, 0xA2 },
				Operands = new Operand[0],
				InstructionType = InstructionType.Standard,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = false
            },
            new Z80Instruction //0xA3
            {
                FormatString = "outi",
				RawBytes = new byte[] { 0xED, 0xA3 },
				Operands = new Operand[0],
				InstructionType = InstructionType.Standard,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = true
            },
			null, //0xA4
			null, //0xA5
			null, //0xA6
			null, //0xA7
            new Z80Instruction //0xA8
            {
                FormatString = "ldd",
				RawBytes = new byte[] { 0xED, 0xA8 },
				Operands = new Operand[0],
				InstructionType = InstructionType.Standard,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = true,
                WritesToPort = false
            },
            new Z80Instruction //0xA9
            {
                FormatString = "cpd",
				RawBytes = new byte[] { 0xED, 0xA9 },
				Operands = new Operand[0],
				InstructionType = InstructionType.Standard,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = false
            },
            new Z80Instruction //0xAA
            {
                FormatString = "ind",
				RawBytes = new byte[] { 0xED, 0xAA },
				Operands = new Operand[0],
				InstructionType = InstructionType.Standard,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = false
            },
            new Z80Instruction //0xAB
            {
                FormatString = "outd",
				RawBytes = new byte[] { 0xED, 0xAB },
				Operands = new Operand[0],
				InstructionType = InstructionType.Standard,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = true
            },
			null, //0xAC
			null, //0xAD
			null, //0xAE
			null, //0xAF
            new Z80Instruction //0xB0
            {
                FormatString = "ldir",
				RawBytes = new byte[] { 0xED, 0xB0 },
				Operands = new Operand[0],
				InstructionType = InstructionType.Standard,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = true,
                WritesToPort = false
            },
            new Z80Instruction //0xB1
            {
                FormatString = "cpir",
				RawBytes = new byte[] { 0xED, 0xB1 },
				Operands = new Operand[0],
				InstructionType = InstructionType.Standard,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = false
            },
            new Z80Instruction //0xB2
            {
                FormatString = "inir",
				RawBytes = new byte[] { 0xED, 0xB2 },
				Operands = new Operand[0],
				InstructionType = InstructionType.Standard,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = false
            },
            new Z80Instruction //0xB3
            {
                FormatString = "otir",
				RawBytes = new byte[] { 0xED, 0xB3 },
				Operands = new Operand[0],
				InstructionType = InstructionType.Standard,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = true
            },
			null, //0xB4
			null, //0xB5
			null, //0xB6
			null, //0xB7
            new Z80Instruction //0xB8
            {
                FormatString = "lddr",
				RawBytes = new byte[] { 0xED, 0xB8 },
				Operands = new Operand[0],
				InstructionType = InstructionType.Standard,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = true,
                WritesToPort = false
            },
            new Z80Instruction //0xB9
            {
                FormatString = "cpdr",
				RawBytes = new byte[] { 0xED, 0xB9 },
				Operands = new Operand[0],
				InstructionType = InstructionType.Standard,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = false
            },
            new Z80Instruction //0xBA
            {
                FormatString = "indr",
				RawBytes = new byte[] { 0xED, 0xBA },
				Operands = new Operand[0],
				InstructionType = InstructionType.Standard,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = false
            },
            new Z80Instruction //0xBB
            {
                FormatString = "otdr",
				RawBytes = new byte[] { 0xED, 0xBB },
				Operands = new Operand[0],
				InstructionType = InstructionType.Standard,
				ChangesSp = false,
                ChangesPc = false,
                WritesToMemory = false,
                WritesToPort = true
            },
		};
    }
}